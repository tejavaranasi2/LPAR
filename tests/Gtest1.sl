(set-logic NIA)
(declare-var x0 Int)
(declare-var x1 Int)
(assume ( or ( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 1 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 1 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= ( - 1 ) x1) (>= ( - 1 ) x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= ( - 1 ) x1) (>= ( - 1 ) x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= ( - 1 ) x1) (>= ( - 1 ) x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= ( - 1 ) x1) (>= ( - 1 ) x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= ( - 1 ) x1) (>= ( - 1 ) x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= ( - 1 ) x1) (>= ( - 1 ) x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= ( - 1 ) x1) (>= ( - 1 ) x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 0 x1) (>= 0 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 0 x0) (>= 0 x0) ) ( and (<= 1 x1) (>= 1 x1) )  )( and ( and (<= 1 x0) (>= 1 x0) ) ( and (<= ( - 1 ) x1) (>= ( - 1 ) x1) )  ) ) )
(declare-var x2 Int)
(assume (and (<= ( - 4 ) x2) (<= x2 4) ) )
(synth-fun f2 ((x0 Int) (x1 Int) ) Int)
(constraint (<= 0 (+ (* 1 (+ (* 1 (+ (* 1 7.000000) (* ( * ( f2 x0 x1 ) ( f2 x0 x1 ) ) ( - 1.000000)) )) (* x1 ( - 1.000000)) (* ( * x1 x1 ) ( - 1.000000)) )) (* x0 (+ (* 1 1.000000) (* x1 ( - 2.000000)) )) (* ( * x0 x0 ) ( - 3.000000)) ) ) )
(constraint (<= 0 (+ (* 1 (+ (* 1 (+ (* 1 3.000000) (* ( f2 x0 x1 ) 2.000000) (* ( * ( f2 x0 x1 ) ( f2 x0 x1 ) ) ( - 1.000000)) )) (* ( * x1 x1 ) ( - 1.000000)) )) (* ( * x0 x0 ) ( - 1.000000)) ) ) )
(constraint (<= 0 (+ (* 1 (+ (* 1 (+ (* 1 ( - 2.000000)) (* ( f2 x0 x1 ) 4.000000) (* ( * ( f2 x0 x1 ) ( f2 x0 x1 ) ) ( - 1.000000)) )) (* x1 2.000000) (* ( * x1 x1 ) ( - 1.000000)) )) (* x0 (+ (* 1 (+ (* 1 2.000000) (* ( f2 x0 x1 ) 1.000000) )) (* x1 1.000000) )) (* ( * x0 x0 ) ( - 1.000000)) ) ) )
(constraint (and (<= ( - 4 ) ( f2 x0 x1 ) ) (<= ( f2 x0 x1 ) 4) ) ) 
(constraint (=> (and (<= 0 (+ (* 1 (+ (* 1 (+ (* 1 7.000000) (* ( * x2 x2 ) ( - 1.000000)) )) (* x1 ( - 1.000000)) (* ( * x1 x1 ) ( - 1.000000)) )) (* x0 (+ (* 1 1.000000) (* x1 ( - 2.000000)) )) (* ( * x0 x0 ) ( - 3.000000)) ) ) (<= 0 (+ (* 1 (+ (* 1 (+ (* 1 3.000000) (* x2 2.000000) (* ( * x2 x2 ) ( - 1.000000)) )) (* ( * x1 x1 ) ( - 1.000000)) )) (* ( * x0 x0 ) ( - 1.000000)) ) ) (<= 0 (+ (* 1 (+ (* 1 (+ (* 1 ( - 2.000000)) (* x2 4.000000) (* ( * x2 x2 ) ( - 1.000000)) )) (* x1 2.000000) (* ( * x1 x1 ) ( - 1.000000)) )) (* x0 (+ (* 1 (+ (* 1 2.000000) (* x2 1.000000) )) (* x1 1.000000) )) (* ( * x0 x0 ) ( - 1.000000)) ) ) ) (or (<= 1 0) (and (<= x2 ( f2 x0 x1 ) ) )
) ) )
(check-synth)
