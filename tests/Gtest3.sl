(set-logic NIA)
(declare-var x0 Int)
(assume ( or ( and ( and (<= ( - 2 ) x0) (>= 0 x0) )  )( and ( and (<= 0 x0) (>= 2 x0) )  )( and ( and (<= 2 x0) (>= 4 x0) )  )( and ( and (<= 2 x0) (>= 4 x0) )  )( and ( and (<= 0 x0) (>= 2 x0) )  )( and ( and (<= ( - 1 ) x0) (>= 0 x0) )  )( and ( and (<= 2 x0) (>= 3 x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 1 ) x0) )  )( and ( and (<= 1 x0) (>= 2 x0) )  )( and ( and (<= 0 x0) (>= 1 x0) )  )( and ( and (<= 1 x0) (>= 2 x0) )  )( and ( and (<= 2 x0) (>= 3 x0) )  )( and ( and (<= 3 x0) (>= 3 x0) )  )( and ( and (<= 0 x0) (>= 0 x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 2 ) x0) )  )( and ( and (<= 1 x0) (>= 1 x0) )  )( and ( and (<= 0 x0) (>= 1 x0) )  )( and ( and (<= ( - 1 ) x0) (>= ( - 1 ) x0) )  )( and ( and (<= ( - 1 ) x0) (>= ( - 1 ) x0) )  )( and ( and (<= 1 x0) (>= 1 x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 2 ) x0) )  )( and ( and (<= 2 x0) (>= 2 x0) )  )( and ( and (<= 1 x0) (>= 1 x0) )  )( and ( and (<= 3 x0) (>= 3 x0) )  )( and ( and (<= 0 x0) (>= 0 x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 2 ) x0) )  )( and ( and (<= 3 x0) (>= 3 x0) )  )( and ( and (<= 2 x0) (>= 2 x0) )  )( and ( and (<= 4 x0) (>= 4 x0) )  )( and ( and (<= 2 x0) (>= 2 x0) )  )( and ( and (<= 3 x0) (>= 3 x0) )  )( and ( and (<= 2 x0) (>= 2 x0) )  )( and ( and (<= 3 x0) (>= 3 x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 2 ) x0) )  )( and ( and (<= ( - 2 ) x0) (>= 0 x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 2 ) x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 2 ) x0) )  )( and ( and (<= 0 x0) (>= 0 x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 2 ) x0) )  )( and ( and (<= 1 x0) (>= 1 x0) )  )( and ( and (<= 4 x0) (>= 4 x0) )  )( and ( and (<= ( - 1 ) x0) (>= 0 x0) )  )( and ( and (<= 3 x0) (>= 3 x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 1 ) x0) )  )( and ( and (<= 0 x0) (>= 0 x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 2 ) x0) )  )( and ( and (<= ( - 1 ) x0) (>= ( - 1 ) x0) )  )( and ( and (<= ( - 1 ) x0) (>= ( - 1 ) x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 2 ) x0) )  )( and ( and (<= ( - 2 ) x0) (>= ( - 2 ) x0) )  ) ) )
(declare-var x1 Int)
(assume (and (<= ( - 4 ) x1) (<= x1 4) ) )
(synth-fun f1 ((x0 Int) ) Int)
(constraint (<= 0 (+ (* 1 (+ (* 1 56.000000) (* ( f1 x0 ) 4.000000) (* ( * ( f1 x0 ) ( f1 x0 ) ) ( - 1.000000)) )) (* x0 8.000000) (* ( * x0 x0 ) ( - 4.000000)) ) ) )
(constraint (<= 0 (+ (* 1 (+ (* 1 60.000000) (* ( * ( f1 x0 ) ( f1 x0 ) ) ( - 4.000000)) )) (* x0 ( - 4.000000)) (* ( * x0 x0 ) ( - 1.000000)) ) ) )
(constraint (and (<= ( - 4 ) ( f1 x0 ) ) (<= ( f1 x0 ) 4) ) ) 
(constraint (=> (and (<= 0 (+ (* 1 (+ (* 1 56.000000) (* x1 4.000000) (* ( * x1 x1 ) ( - 1.000000)) )) (* x0 8.000000) (* ( * x0 x0 ) ( - 4.000000)) ) ) (<= 0 (+ (* 1 (+ (* 1 60.000000) (* ( * x1 x1 ) ( - 4.000000)) )) (* x0 ( - 4.000000)) (* ( * x0 x0 ) ( - 1.000000)) ) ) ) (or (<= 1 0) (and (<= x1 ( f1 x0 ) ) )
) ) )
(check-synth)
